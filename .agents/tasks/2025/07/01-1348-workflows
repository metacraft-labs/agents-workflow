Let's implement and document a new feature:

# Feature Description (Workflows)

The task description entered by the user may include lines starting with /

These are considered "workflow commands". They correspond to user-defined programs or shell scripts placed in the `.agents/workflows` directory of the repository under which `get-task` is executed. When `get-task` is executed, it looks for such workflow commands in the task description. For each such command, the matching programs is executed and its output is inserted in the place of the workflow command in the final text printed to `stdout` by `get-task` (a good analogy for this would be a macro in a programming language).

The workflow command line may feature parameters. These should be parsed in the same way bash would parse them (i.e. `/some-workflow 10 "foo bar"` would mean two parameters, the second one being a string).

Instead of a workflow program, in the `.agents/workflows` dir there might be a simple txt file named `<workflow-command>.txt`. In this case, the contents of this file are inserted as a verbatim copy in the place of the workflow command.

In the output of each workflow command, there might be special lines such as "@agents-setup FOO=x BAR=10". Such lines indicate ENV variables that will be set in the environment by scripts such as `codex-setup`, `jules-setup`, etc, before the matching user-defined setup script from the `.agents` directory of the target repository are executed. The lines are stripped from the regular `get-task` output.

The command `get-task --get-setup-env` lists all such ENV vars with their assignments from all @agents-setup directives that ended up in the task description (both inserted by the user directly and inserted by workflow commands). The `agents-workflow/***-setup` scripts use this command to set up the environment.

## Validation of the task description

After the user enters the task description (the EDITOR executed by `agent-task` quits with exit code 0), we would validate the entered task description. Any referenced workflows that don't have a matching definitions under `.agents/workflows` will be reported as errors. Conflicting variable assignments from `@agents-setup` directives will be reported as errors as well.

If some of workflow commands exit with a non-zero exit code, their `stderr` is included in a diagnostic message like this:

Failure in executing workflow commands:
$ foo 10
<stderr contents>
$ bar
<stderr contents>

If the workflow command script exists, but it's not executable, try to automatically make it executable on platforms where this is possible. If this was not successful, report this with an appropriate diagnostic message.

The error are reported by printing all diagnostic messages on the screen and asking the user to press any key to continue or Ctrl+C to abort. If the user continues, the editor is launched again, allowing the user to correct the issues.

If the task description is directly supplied on the command line with `--prompt` or `--prompt-file`, `agent-task` reports the same diagnostic messages and exits with non-zero exit code.

# Tasks

* Implement the new features

* Provide comprehensive user-facing documentation in the README.

* Add tests for all of the described functionality. Make sure to test the happy path for shell scripts and ruby programs as workflow commands, as well as with txt files. Make sure to have tests for the correct production of error massages in all possible modes (interactive, --prompt, --prompt-file). Make sure to add test cases for all possible diagnostic message conditions.

* Add a test case that setups a new temp repo that features setup scripts in its `.agents` directory. Simulate running scripts such as `agents-workflow/codex-setup`, `agents-workflow/jules-setup`, etc, when the CWD is set to the temp repository and verify that env vars provided with @agents-setup directives in the task description will be properly loaded and forwarded to the setup scripts from the temp repo. Please note that the `agents-workflow` repo will be moved as a result of calling the setup script, so invoke the setup command with a fresh local clone of the agents-workflow repo for each test or suppress the moving logic for most tests (keep at least one test that enables the logic though).

--- FOLLOW UP TASK ---
Please implement all test cases described near the end of .agents/tasks/2025/07/01-1348-workflows. Think of any additional test cases that would cover all of the described functionality.

--- FOLLOW UP TASK ---
Let's improve the test cases for the workflows feature:

1) There is no need to have multiple test files. You can combine them into one, but don't delete any test.
2) I'd like some of tests to involve more then one workflow commands.
3) I'd like some of the task descriptions to be longer, where the workflow command appears as a first line, as a last line (with or without a trailing whitespace), in the middle of the text, with trailing whitespace on the line, etc.
4) I'd like to see some workflow commands accepting parameters. Make sure some of the parameters are strings that contain spaces.

--- FOLLOW UP TASK ---
In the tests folder, use indented heredoc strings instead of single-line strings with "\n" characters in order to make the code easier to read.

--- FOLLOW UP TASK ---
Helpers like   are now defined in multiple places. Refactor the code to use a single definition (probably a regular global function). There are similar helpers for Linux and macOS. They should all be in a single place.
--- FOLLOW UP TASK ---
Helpers like `windows?`  are now defined in multiple places. Refactor the code to use a single definition (probably a regular global function). There are similar helpers for Linux and macOS. They should all be in a single place.
